require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe MailMergesController do

  # This should return the minimal set of attributes required to create a valid
  # MailMerge. As you add validations to MailMerge, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    tmp_mm = build(:mail_merge)
    {
      'data' => tmp_mm.data,
      'body_template' => tmp_mm.body_template,
      'subject_template' => tmp_mm.subject_template
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # MailMergesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  describe "GET index" do
    it "assigns all mail_merges as @mail_merges" do
      mail_merge = MailMerge.create! valid_attributes
      get :index, {}, valid_session
      assigns(:mail_merges).should eq([mail_merge])
    end
  end

  describe "GET show" do
    it "assigns the requested mail_merge as @mail_merge" do
      mail_merge = MailMerge.create! valid_attributes
      get :show, {:id => mail_merge.to_param}, valid_session
      assigns(:mail_merge).should eq(mail_merge)
    end
  end

  describe "GET new" do
    it "assigns a new mail_merge as @mail_merge" do
      get :new, {}, valid_session
      assigns(:mail_merge).should be_a_new(MailMerge)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new MailMerge" do
        expect {
          post :create, {:mail_merge => valid_attributes}, valid_session
        }.to change(MailMerge, :count).by(1)
      end

      it "assigns a newly created mail_merge as @mail_merge" do
        ActionMailer::Base.deliveries.clear
        post :create, {:mail_merge => valid_attributes}, valid_session
        assigns(:mail_merge).should be_a(MailMerge)
        assigns(:mail_merge).should be_persisted
        assigns(:mail_merge).emails.count.should == 4
        ActionMailer::Base.deliveries.count.should == 4
      end

      it "redirects to the created mail_merge" do
        post :create, {:mail_merge => valid_attributes}, valid_session
        response.should redirect_to(MailMerge.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved mail_merge as @mail_merge" do
        # Trigger the behavior that occurs when invalid params are submitted
        MailMerge.any_instance.stub(:save).and_return(false)
        post :create, {:mail_merge => { "data" => "invalid value" }}, valid_session
        assigns(:mail_merge).should be_a_new(MailMerge)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        MailMerge.any_instance.stub(:save).and_return(false)
        post :create, {:mail_merge => { "data" => "invalid value" }}, valid_session
        response.should render_template("new")
      end
    end
  end

end
